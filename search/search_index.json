{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Summary confsecrets is a library providing secure symmetric cryptography based on PyCrypto or cryptodome to any Python project. A set of secrets are collected into a \"vault\" which is stored as a JSON or YAML file. All secrets share the same salt and binary key. The binary key is derived from a clear text key via PBKDF2. Installation confsecrets is best installed from your Python Package repository: pip install confsecrets This provides two top-level packages: confsecrets - general support for secrets management djsecrets - Django integration Integration with Django Integration with Django requires that you add the app to your Django apps: INSTALLED_APPS = [ ... 'djsecrets', ] To determine a new random salt which will be specific to your project, use the following management command: ./manage.py newsalt Then, configure the salt and the secrets path in your Django settings: CONFSECRETS_SALT = b'abcd1234' CONFSECRETS_PATH = os.path.join(BASE_DIR, 'mysecrets.json') For more information, see the Django Integration section.","title":"Getting Started"},{"location":"#summary","text":"confsecrets is a library providing secure symmetric cryptography based on PyCrypto or cryptodome to any Python project. A set of secrets are collected into a \"vault\" which is stored as a JSON or YAML file. All secrets share the same salt and binary key. The binary key is derived from a clear text key via PBKDF2.","title":"Summary"},{"location":"#installation","text":"confsecrets is best installed from your Python Package repository: pip install confsecrets This provides two top-level packages: confsecrets - general support for secrets management djsecrets - Django integration","title":"Installation"},{"location":"#integration-with-django","text":"Integration with Django requires that you add the app to your Django apps: INSTALLED_APPS = [ ... 'djsecrets', ] To determine a new random salt which will be specific to your project, use the following management command: ./manage.py newsalt Then, configure the salt and the secrets path in your Django settings: CONFSECRETS_SALT = b'abcd1234' CONFSECRETS_PATH = os.path.join(BASE_DIR, 'mysecrets.json') For more information, see the Django Integration section.","title":"Integration with Django"},{"location":"api/","text":"confsecrets.pbe Provides secure, symmetric encryption without much around it. Includes these exceptions: confsecrets.pbe.InvalidSalt - raised for an invalid salt confsecrets.pbe.MessageTooShort - raised when attempting to decrypt a message that has no room for IV, ciphertext, and MAC confsecrets.pbe.InvalidMessageAuthenticationCode - raised when decrypting a message with an invalid MAC confsecrets.pbe.PasswordTooSimple - raised when PasswordUtil receives a password that is not complex enough. confsecrets.pbe.PasswordNotShellSafe - raised when PasswordUtil receives a password that must be escaped from a Linux shell. Includes these types: confsecrets.pbe.PasswordUtil : PasswordUtil.check - a static method that checks a password for length, complexity, and shell safety. PasswordUtil.generate - a static method that generates a password matching above rules confsecrets.pbe.PBEUtil - This is the heart of the module, providing secure, symmetric encryption. confsecrets.vault Implements a file-based container of encrypted material. Each piece of encrypted material is accessed via a key. Includes these exceptions: confsecrets.vault.VaultPathMissing - raised when no path has been provided confsecrets.vault.VaultNotFound - raised for operating systems errors accessing the vault confsecrets.vault.VaultFormatError - raised when the vault is in an invalid format Includes these types: confsecrets.vault.Vault - A dictionary type that stores its values as encrypted, base64 encoded messages within a JSON or YAML file. confsecrets.vault.DefaultVault - A vault with global parameters that functions as a singleton confsecrets.secrets Provides objects that behave like strings or other types, which are backed by the vault. Includes these types: confsecrets.secrets.BaseSecret - A base secret simply knows how to set and get its value from a vault. If no vault is provided, it uses the DefaultVault . confsecrets.secrets.Secret - A secret that behaves like a string in string contexts, a bool in bool contexts, and so on. djsecrets Implements a Django application for secret management: Includes these management commands: newsalt - Generates a new random salt for encryption listsecrets - lists all secrets in the vault putsecret - Save a secret and its value into the vault getsecret - Gets the value of a single secret from the vault rmsecret - Remove a secret from the vault Includes these settings: CONFSECRETS_SALT - An 8-byte binary value. CONFSECRETS_PATH - A file system path CONFSECRETS_KEY - A clear-text key that is converted to a binary key Includes these types: djsecrets.Secret - an alias for confsecrets.secrets.Secret djsecrets.BaseSecret - an alias for confsecrets.secrets.BaseSecret","title":"API Reference"},{"location":"api/#confsecretspbe","text":"Provides secure, symmetric encryption without much around it. Includes these exceptions: confsecrets.pbe.InvalidSalt - raised for an invalid salt confsecrets.pbe.MessageTooShort - raised when attempting to decrypt a message that has no room for IV, ciphertext, and MAC confsecrets.pbe.InvalidMessageAuthenticationCode - raised when decrypting a message with an invalid MAC confsecrets.pbe.PasswordTooSimple - raised when PasswordUtil receives a password that is not complex enough. confsecrets.pbe.PasswordNotShellSafe - raised when PasswordUtil receives a password that must be escaped from a Linux shell. Includes these types: confsecrets.pbe.PasswordUtil : PasswordUtil.check - a static method that checks a password for length, complexity, and shell safety. PasswordUtil.generate - a static method that generates a password matching above rules confsecrets.pbe.PBEUtil - This is the heart of the module, providing secure, symmetric encryption.","title":"confsecrets.pbe"},{"location":"api/#confsecretsvault","text":"Implements a file-based container of encrypted material. Each piece of encrypted material is accessed via a key. Includes these exceptions: confsecrets.vault.VaultPathMissing - raised when no path has been provided confsecrets.vault.VaultNotFound - raised for operating systems errors accessing the vault confsecrets.vault.VaultFormatError - raised when the vault is in an invalid format Includes these types: confsecrets.vault.Vault - A dictionary type that stores its values as encrypted, base64 encoded messages within a JSON or YAML file. confsecrets.vault.DefaultVault - A vault with global parameters that functions as a singleton","title":"confsecrets.vault"},{"location":"api/#confsecretssecrets","text":"Provides objects that behave like strings or other types, which are backed by the vault. Includes these types: confsecrets.secrets.BaseSecret - A base secret simply knows how to set and get its value from a vault. If no vault is provided, it uses the DefaultVault . confsecrets.secrets.Secret - A secret that behaves like a string in string contexts, a bool in bool contexts, and so on.","title":"confsecrets.secrets"},{"location":"api/#djsecrets","text":"Implements a Django application for secret management: Includes these management commands: newsalt - Generates a new random salt for encryption listsecrets - lists all secrets in the vault putsecret - Save a secret and its value into the vault getsecret - Gets the value of a single secret from the vault rmsecret - Remove a secret from the vault Includes these settings: CONFSECRETS_SALT - An 8-byte binary value. CONFSECRETS_PATH - A file system path CONFSECRETS_KEY - A clear-text key that is converted to a binary key Includes these types: djsecrets.Secret - an alias for confsecrets.secrets.Secret djsecrets.BaseSecret - an alias for confsecrets.secrets.BaseSecret","title":"djsecrets"},{"location":"django/","text":"Settings The djsecrets module supports the following settings: CONFSECRETS_SALT - This must be a binary value at least 8-bytes long, and should be unique between projects. CONFSECRETS_PATH - The path where this module will look for your secrets. CONFSECRETS_KEY - This is a clear text key. Environment variables for all settings are supported; the django settings apply only to djsecrets whereas the environment variables are implemented in confsecrets . Note Putting the encrypted material (vault file), salt, and clear text key in the same git repository is no more than obfuscation. For best security, these should only come together on the developer's desktop, in continuous integration (Jenkins), and on deployed servers. Secrets Secrets are typically declared as static objects in your settings, like this: from djsecrets import Secret ... SOCK_COLOR = Secret('sockcolor') UNDERWEAR = Secret('has_underwear') Secrets behave like strings under the appropriate circumstance: print('His socks are %s' % settings.SOCK_COLOR) Secrets behave like booleans under the appropriate circumstance: print('He wears underwear' if settings.UNDERWEAR else 'He has no underwear') Management Commands djsecrets supports the following management commands: newsalt - Generates a new salt using a secure PRNG listsecrets - Lists secrets and their values in the vault getsecret - Gets the value of a secret from the vault putsecret - Puts a new value for a secret into the vault rmsecret - Removes a secret from a vault Common Errors If you use a secret that does not exist in the vault, you will get a KeyError , just as if you were accessing a value that is not present in a dictionary.","title":"Django Integration"},{"location":"django/#settings","text":"The djsecrets module supports the following settings: CONFSECRETS_SALT - This must be a binary value at least 8-bytes long, and should be unique between projects. CONFSECRETS_PATH - The path where this module will look for your secrets. CONFSECRETS_KEY - This is a clear text key. Environment variables for all settings are supported; the django settings apply only to djsecrets whereas the environment variables are implemented in confsecrets . Note Putting the encrypted material (vault file), salt, and clear text key in the same git repository is no more than obfuscation. For best security, these should only come together on the developer's desktop, in continuous integration (Jenkins), and on deployed servers.","title":"Settings"},{"location":"django/#secrets","text":"Secrets are typically declared as static objects in your settings, like this: from djsecrets import Secret ... SOCK_COLOR = Secret('sockcolor') UNDERWEAR = Secret('has_underwear') Secrets behave like strings under the appropriate circumstance: print('His socks are %s' % settings.SOCK_COLOR) Secrets behave like booleans under the appropriate circumstance: print('He wears underwear' if settings.UNDERWEAR else 'He has no underwear')","title":"Secrets"},{"location":"django/#management-commands","text":"djsecrets supports the following management commands: newsalt - Generates a new salt using a secure PRNG listsecrets - Lists secrets and their values in the vault getsecret - Gets the value of a secret from the vault putsecret - Puts a new value for a secret into the vault rmsecret - Removes a secret from a vault","title":"Management Commands"},{"location":"django/#common-errors","text":"If you use a secret that does not exist in the vault, you will get a KeyError , just as if you were accessing a value that is not present in a dictionary.","title":"Common Errors"}]}